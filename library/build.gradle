plugins {
    id("net.ltgt.errorprone")
}

apply plugin: 'com.android.library'


dependencies {
    api project(':third_party:gif_decoder')
    api project(':third_party:disklrucache')
//    api project(':annotation')
    api "androidx.fragment:fragment:${ANDROID_X_FRAGMENT_VERSION}"
    api "androidx.vectordrawable:vectordrawable-animated:${ANDROID_X_VERSION}"
    api "androidx.exifinterface:exifinterface:${EXIF_INTERFACE_VERSION}"
    api "androidx.tracing:tracing:${ANDROID_X_TRACING_VERSION}"
    compileOnly "androidx.appcompat:appcompat:${ANDROID_X_VERSION}"

    if (project.plugins.hasPlugin('net.ltgt.errorprone')) {
        errorprone "com.google.errorprone:error_prone_core:${ERROR_PRONE_VERSION}"
    }

    testImplementation "androidx.appcompat:appcompat:${ANDROID_X_VERSION}"
    testImplementation project(':testutil')
    testImplementation 'com.google.guava:guava-testlib:18.0'
    testImplementation "com.google.truth:truth:${TRUTH_VERSION}"
    testImplementation "junit:junit:${JUNIT_VERSION}"
    testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
    testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
    testImplementation "androidx.legacy:legacy-support-v4:${ANDROID_X_VERSION}"
    testImplementation "androidx.test:core:${ANDROID_X_TEST_VERSION}"
    testImplementation "androidx.test.ext:junit:${ANDROID_X_TEST_JUNIT_VERSION}"
    testImplementation "androidx.test:runner:${ANDROID_X_TEST_VERSION}"

    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    errorprone "com.google.errorprone:error_prone_core:2.3.2"
    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"

    annotationProcessor "com.uber.nullaway:nullaway:0.10.8"
    annotationProcessor "edu.ucr.cs.riple.annotator:annotator-scanner:1.3.6-alpha-5"
    compileOnly "com.uber.nullaway:nullaway-annotations:0.10.10"
}

android {
    compileSdkVersion COMPILE_SDK_VERSION as int

    defaultConfig {
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionName VERSION_NAME as String
        consumerProguardFiles 'proguard-rules.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

check.dependsOn(':library:pmd:pmd')
check.dependsOn(':library:test:check')

// Used in pmd and findbugs subprojects.
@SuppressWarnings("GroovyUnusedDeclaration")
def classPathForQuality() {
    return files(
            android.bootClasspath,
            project.configurations.compile,
            project.android.libraryVariants.collect { it.javaCompile.classpath }
    )
}

apply from: "${rootProject.projectDir}/scripts/upload.gradle"

import net.ltgt.gradle.errorprone.CheckSeverity

tasks.withType(JavaCompile) {
    // remove the if condition if you want to run NullAway on test code
    if (!name.toLowerCase().contains("test")) {
        options.errorprone.disableAllChecks = true
        options.errorprone.disableAllWarnings = true
        options.errorprone {
            check("NullAway", CheckSeverity.ERROR)
            check("AnnotatorScanner", CheckSeverity.ERROR)
            option("NullAway:AnnotatedPackages", "com.bumptech.glide")
            option("NullAway:UnannotatedSubPackages", "com.bumptech.glide.gifdecoder")
            option("NullAway:UnannotatedSubPackages", "com.bumptech.glide.disklrucache")
            option("NullAway:SerializeFixMetadata", "true")
            option("NullAway:FixSerializationConfigPath", "/tmp/annotator/checker.xml")
            option("AnnotatorScanner:ConfigPath", "/tmp/annotator/scanner.xml")
        }
    }
    options.compilerArgs << "-Xmaxerrs" << "100000"
    options.compilerArgs << "-Xmaxwarns" << "100000"
}
